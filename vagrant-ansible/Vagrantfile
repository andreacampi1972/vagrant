# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'

# Variables
 
# Configure user ssh_public_key
if File.exists?('config/ssh_connection.yml')
  ssh_connection      = YAML.load_file 'config/ssh_connection.yml'
  var_ssh_public_key  = ssh_connection['ssh_public_key']
end

server              = YAML.load_file ('config/server_configuration.yml')
var_box             = server['box']
var_box_url         = server['box_url']
var_vagrant_pwd     = server['vagrant_password']
var_vbg_auto_update = server['vbguest_auto_update']
var_ssh_port        = "2" + server['ip_number']
var_vm_name         = server['vm_name']
var_mem_size        = server['mem_size']
var_cpus            = server['cpus']
var_public_ip       = "192.168.56." + server['ip_number']
var_non_rotational  = server['non_rotational']

var_disk1_name      = "./" + server['vm_name'] + "-images1.vdi"
var_disk1_size      = server['disk1_size']
var_disk1_device    = server['disk1_device']
var_disk1_mountpoint= server['disk1_mountpoint']

var_disk2_name      = "./" + server['vm_name'] + "-images2.vdi"
var_disk2_size      = server['disk2_size']
var_disk2_device    = server['disk2_device']
var_disk2_mountpoint= server['disk2_mountpoint']

var_disk3_name      = "./" + server['vm_name'] + "-images3.vdi"
var_disk3_size      = server['disk3_size']
var_disk3_device    = server['disk3_device']
var_disk3_mountpoint= server['disk3_mountpoint']

var_disk4_name      = "./" + server['vm_name'] + "-images4.vdi"
var_disk4_size      = server['disk4_size']
var_disk4_device    = server['disk4_device']
var_disk4_mountpoint= server['disk4_mountpoint']

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = var_box
  unless var_box_url.nil?
    config.vm.box_url = "#{var_box_url}/#{var_box}.json"
  end
  
  # config.vbguest.auto_update default true
  unless var_vbg_auto_update.nil? || var_vbg_auto_update == true
    config.vbguest.auto_update = false
  end
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
  config.vm.network "forwarded_port", guest: 22, host: var_ssh_port, id: "ssh", auto_correct: true

  #config.vm.network "forwarded_port", guest: 80, host: 80
  #config.vm.network "forwarded_port", guest: 443, host: 443
  #config.vm.network "forwarded_port", guest: 8080, host: 8080
  #config.vm.network "forwarded_port", guest: 8443, host: 8443
  #config.vm.network "forwarded_port", guest: 1521, host: 1521
  #config.vm.network "forwarded_port", guest: 5432, host: 5432


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", ip: var_public_ip

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "config", "/vagrant_config"
  config.vm.synced_folder "software", "/vagrant_software"
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.memory = var_mem_size
    vb.cpus   = var_cpus
    vb.name   = var_vm_name
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]

    vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]

    unless var_disk1_size.nil? || var_disk1_size == 0
      unless File.exist?(var_disk1_name)
        vb.customize ['createhd', '--filename', var_disk1_name, '--size', var_disk1_size * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk1_name]
    end
    unless var_disk2_size.nil? || var_disk2_size == 0
        unless File.exist?(var_disk2_name)
          vb.customize ['createhd', '--filename', var_disk2_name, '--size', var_disk2_size * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk2_name]
    end
    unless var_disk3_size.nil? || var_disk3_size == 0
        unless File.exist?(var_disk3_name)
          vb.customize ['createhd', '--filename', var_disk3_name, '--size', var_disk3_size * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 3, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk3_name]
    end
    unless var_disk4_size.nil? || var_disk4_size == 0
        unless File.exist?(var_disk4_name)
          vb.customize ['createhd', '--filename', var_disk4_name, '--size', var_disk4_size * 1024]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 4, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_disk4_name]
    end


 end
#
#configure password if defined
unless var_vagrant_pwd.nil?
env_var_change_pwd = <<CMD
echo "#{var_vagrant_pwd}" | passwd --stdin vagrant
CMD
end

unless var_ssh_public_key.nil? || var_ssh_public_key == 0
ssh_pub_key = File.readlines("#{var_ssh_public_key}").first.strip
env_var_cmd_ssh = <<CMD
echo "#{ssh_pub_key}" >> /home/vagrant/.ssh/authorized_keys
mkdir /root/.ssh
echo "#{ssh_pub_key}" >> /root/.ssh/authorized_keys
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config    
systemctl restart sshd.service
CMD
end


unless var_disk1_name.nil? || var_disk1_name == 0
env_var_cmd1 = <<CMD
echo "export var_disk1_device=#{var_disk1_device}" | tee -a /etc/profile.d/vagrantstartup.sh
echo "export var_disk1_mountpoint=#{var_disk1_mountpoint}"  | tee -a /etc/profile.d/vagrantstartup.sh
CMD
end
unless var_disk2_name.nil? || var_disk2_name == 0
env_var_cmd2 = <<CMD
echo "export var_disk1_device=#{var_disk2_device}" | tee -a /etc/profile.d/vagrantstartup.sh
echo "export var_disk1_mountpoint=#{var_disk2_mountpoint}"  | tee -a /etc/profile.d/vagrantstartup.sh
CMD
end
unless var_disk3_name.nil? || var_disk3_name == 0
env_var_cmd3 = <<CMD
echo "export var_disk1_device=#{var_disk3_device}" | tee -a /etc/profile.d/vagrantstartup.sh
echo "export var_disk1_mountpoint=#{var_disk3_mountpoint}"  | tee -a /etc/profile.d/vagrantstartup.sh
CMD
end

unless var_disk4_name.nil?|| var_disk4_name == 0
env_var_cmd4 = <<CMD
echo "export var_disk1_device=#{var_disk4_device}" | tee -a /etc/profile.d/vagrantstartup.sh
echo "export var_disk1_mountpoint=#{var_disk4_mountpoint}"  | tee -a /etc/profile.d/vagrantstartup.sh
CMD
end



script = <<SCRIPT
hostnamectl set-hostname #{var_vm_name}
#{env_var_change_pwd}
#{env_var_cmd_ssh}
#{env_var_cmd1}
#{env_var_cmd2}
#{env_var_cmd3}
#{env_var_cmd4}
sh /vagrant/scripts/00_setup.sh

SCRIPT

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.


  config.vm.provision :shell, :inline => script

end
